declare module "support/utils/errors" {
    export function onUnexpectedError(e: any): undefined;
}
declare module "support/utils/functional" {
    export function once<T extends Function>(this: unknown, fn: T): T;
}
declare module "support/utils/iterator" {
    export namespace Iterable {
        function is<T = any>(thing: any): thing is IterableIterator<T>;
        function empty<T = any>(): Iterable<T>;
    }
}
declare module "support/utils/lifecycle" {
    export interface IDisposable {
        dispose(): void;
    }
    export function dispose<T extends IDisposable>(disposable: T): T;
    export function dispose<T extends IDisposable>(disposable: T | undefined): T | undefined;
    export function dispose<T extends IDisposable, A extends IterableIterator<T> = IterableIterator<T>>(disposables: IterableIterator<T>): A;
    export function dispose<T extends IDisposable>(disposables: Array<T>): Array<T>;
    export function dispose<T extends IDisposable>(disposables: ReadonlyArray<T>): ReadonlyArray<T>;
    export function combinedDisposable(...disposables: IDisposable[]): IDisposable;
    export function toDisposable(fn: () => void): IDisposable;
    export class DisposableStore implements IDisposable {
        static DISABLE_DISPOSED_WARNING: boolean;
        private _toDispose;
        private _isDisposed;
        constructor();
        /**
         * Dispose of all registered disposables and mark this object as disposed.
         *
         * Any future disposables added to this object will be disposed of on `add`.
         */
        dispose(): void;
        /**
         * Returns `true` if this object has been disposed
         */
        get isDisposed(): boolean;
        /**
         * Dispose of all registered disposables but do not mark this object as disposed.
         */
        clear(): void;
        add<T extends IDisposable>(o: T): T;
    }
    export abstract class Disposable implements IDisposable {
        static readonly None: Readonly<IDisposable>;
        protected readonly _store: DisposableStore;
        constructor();
        dispose(): void;
        protected _register<T extends IDisposable>(o: T): T;
    }
    /**
     * A safe disposable can be `unset` so that a leaked reference (listener)
     * can be cut-off.
     */
    export class SafeDisposable implements IDisposable {
        dispose: () => void;
        unset: () => void;
        isset: () => boolean;
        constructor();
        set(fn: Function): this;
    }
}
declare module "support/utils/linkedList" {
    export class LinkedList<E> {
        private _first;
        private _last;
        private _size;
        get size(): number;
        isEmpty(): boolean;
        clear(): void;
        unshift(element: E): () => void;
        push(element: E): () => void;
        private _insert;
        shift(): E | undefined;
        pop(): E | undefined;
        private _remove;
        [Symbol.iterator](): Iterator<E>;
    }
}
declare module "support/utils/event" {
    import { DisposableStore, IDisposable, SafeDisposable } from "support/utils/lifecycle";
    import { LinkedList } from "support/utils/linkedList";
    /**
     * To an event a function with one or zero parameters
     * can be subscribed. The event is the subscriber function itself.
     */
    export interface Event<T> {
        (listener: (e: T) => any, thisArgs?: any, disposables?: IDisposable[] | DisposableStore): IDisposable;
    }
    export namespace Event {
        const None: Event<any>;
        /**
         * Given an event, returns another event which only fires once.
         */
        function once<T>(event: Event<T>): Event<T>;
        /**
         * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned
         * event is accessible to "third parties", e.g the event is a public property. Otherwise a leaked listener on the
         * returned event causes this utility to leak a listener on the original event.
         */
        function map<I, O>(event: Event<I>, map: (i: I) => O, disposable?: DisposableStore): Event<O>;
        /**
         * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned
         * event is accessible to "third parties", e.g the event is a public property. Otherwise a leaked listener on the
         * returned event causes this utility to leak a listener on the original event.
         */
        function forEach<I>(event: Event<I>, each: (i: I) => void, disposable?: DisposableStore): Event<I>;
        /**
         * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned
         * event is accessible to "third parties", e.g the event is a public property. Otherwise a leaked listener on the
         * returned event causes this utility to leak a listener on the original event.
         */
        function filter<T, U>(event: Event<T | U>, filter: (e: T | U) => e is T, disposable?: DisposableStore): Event<T>;
        function filter<T>(event: Event<T>, filter: (e: T) => boolean, disposable?: DisposableStore): Event<T>;
        function filter<T, R>(event: Event<T | R>, filter: (e: T | R) => e is R, disposable?: DisposableStore): Event<R>;
        /**
         * Given an event, returns the same event but typed as `Event<void>`.
         */
        function signal<T>(event: Event<T>): Event<void>;
        /**
         * Given a collection of events, returns a single event which emits
         * whenever any of the provided events emit.
         */
        function any<T>(...events: Event<T>[]): Event<T>;
        function any(...events: Event<any>[]): Event<void>;
        /**
         * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned
         * event is accessible to "third parties", e.g the event is a public property. Otherwise a leaked listener on the
         * returned event causes this utility to leak a listener on the original event.
         */
        function reduce<I, O>(event: Event<I>, merge: (last: O | undefined, event: I) => O, initial?: O, disposable?: DisposableStore): Event<O>;
        /**
         * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned
         * event is accessible to "third parties", e.g the event is a public property. Otherwise a leaked listener on the
         * returned event causes this utility to leak a listener on the original event.
         */
        function debounce<T>(event: Event<T>, merge: (last: T | undefined, event: T) => T, delay?: number, leading?: boolean, leakWarningThreshold?: number, disposable?: DisposableStore): Event<T>;
        /**
         * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned
         * event is accessible to "third parties", e.g the event is a public property. Otherwise a leaked listener on the
         * returned event causes this utility to leak a listener on the original event.
         */
        function debounce<I, O>(event: Event<I>, merge: (last: O | undefined, event: I) => O, delay?: number, leading?: boolean, leakWarningThreshold?: number, disposable?: DisposableStore): Event<O>;
        /**
         * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned
         * event is accessible to "third parties", e.g the event is a public property. Otherwise a leaked listener on the
         * returned event causes this utility to leak a listener on the original event.
         */
        function latch<T>(event: Event<T>, equals?: (a: T, b: T) => boolean, disposable?: DisposableStore): Event<T>;
        /**
         * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned
         * event is accessible to "third parties", e.g the event is a public property. Otherwise a leaked listener on the
         * returned event causes this utility to leak a listener on the original event.
         */
        function split<T, U>(event: Event<T | U>, isT: (e: T | U) => e is T, disposable?: DisposableStore): [Event<T>, Event<U>];
        /**
         * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned
         * event is accessible to "third parties", e.g the event is a public property. Otherwise a leaked listener on the
         * returned event causes this utility to leak a listener on the original event.
         */
        function buffer<T>(event: Event<T>, flushAfterTimeout?: boolean, _buffer?: T[]): Event<T>;
        interface IChainableEvent<T> {
            event: Event<T>;
            map<O>(fn: (i: T) => O): IChainableEvent<O>;
            forEach(fn: (i: T) => void): IChainableEvent<T>;
            filter(fn: (e: T) => boolean): IChainableEvent<T>;
            filter<R>(fn: (e: T | R) => e is R): IChainableEvent<R>;
            reduce<R>(merge: (last: R | undefined, event: T) => R, initial?: R): IChainableEvent<R>;
            latch(): IChainableEvent<T>;
            debounce(merge: (last: T | undefined, event: T) => T, delay?: number, leading?: boolean, leakWarningThreshold?: number): IChainableEvent<T>;
            debounce<R>(merge: (last: R | undefined, event: T) => R, delay?: number, leading?: boolean, leakWarningThreshold?: number): IChainableEvent<R>;
            on(listener: (e: T) => any, thisArgs?: any, disposables?: IDisposable[] | DisposableStore): IDisposable;
            once(listener: (e: T) => any, thisArgs?: any, disposables?: IDisposable[]): IDisposable;
        }
        /**
         * @deprecated DO NOT use, this leaks memory
         */
        function chain<T>(event: Event<T>): IChainableEvent<T>;
        interface NodeEventEmitter {
            on(event: string | symbol, listener: Function): unknown;
            removeListener(event: string | symbol, listener: Function): unknown;
        }
        function fromNodeEventEmitter<T>(emitter: NodeEventEmitter, eventName: string, map?: (...args: any[]) => T): Event<T>;
        interface DOMEventEmitter {
            addEventListener(event: string | symbol, listener: Function): void;
            removeEventListener(event: string | symbol, listener: Function): void;
        }
        function fromDOMEventEmitter<T>(emitter: DOMEventEmitter, eventName: string, map?: (...args: any[]) => T): Event<T>;
        function toPromise<T>(event: Event<T>): Promise<T>;
        function runAndSubscribe<T>(event: Event<T>, handler: (e: T | undefined) => any): IDisposable;
        function runAndSubscribeWithStore<T>(event: Event<T>, handler: (e: T | undefined, disposableStore: DisposableStore) => any): IDisposable;
    }
    interface EmitterOptions {
        onFirstListenerAdd?: Function;
        onFirstListenerDidAdd?: Function;
        onListenerDidAdd?: Function;
        onLastListenerRemove?: Function;
        leakWarningThreshold?: number;
        /**
         * Pass in a delivery queue, which is useful for ensuring
         * in order event delivery across multiple emitters.
         */
        deliveryQueue?: EventDeliveryQueue;
    }
    class Stacktrace {
        readonly value: string;
        static create(): Stacktrace;
        private constructor();
        print(): void;
    }
    class Listener<T> {
        readonly callback: (e: T) => void;
        readonly callbackThis: any | undefined;
        readonly stack: Stacktrace | undefined;
        readonly subscription: SafeDisposable;
        constructor(callback: (e: T) => void, callbackThis: any | undefined, stack: Stacktrace | undefined);
        invoke(e: T): void;
    }
    /**
     * The Emitter can be used to expose an Event to the public
     * to fire it from the insides.
     * Sample:
        class Document {
    
            private readonly _onDidChange = new Emitter<(value:string)=>any>();
    
            public onDidChange = this._onDidChange.event;
    
            // getter-style
            // get onDidChange(): Event<(value:string)=>any> {
            // 	return this._onDidChange.event;
            // }
    
            private _doIt() {
                //...
                this._onDidChange.fire(value);
            }
        }
     */
    export class Emitter<T> {
        private readonly _options?;
        private _disposed;
        private _event?;
        private _deliveryQueue?;
        protected _listeners?: LinkedList<Listener<T>>;
        constructor(options?: EmitterOptions);
        dispose(): void;
        /**
         * For the public to allow to subscribe
         * to events from this Emitter
         */
        get event(): Event<T>;
        /**
         * To be kept private to fire an event to
         * subscribers
         */
        fire(event: T): void;
        hasListeners(): boolean;
    }
    class EventDeliveryQueue {
        protected _queue: LinkedList<EventDeliveryQueueElement<any>>;
        get size(): number;
        push<T>(emitter: Emitter<T>, listener: Listener<T>, event: T): void;
        clear<T>(emitter: Emitter<T>): void;
        deliver(): void;
    }
    class EventDeliveryQueueElement<T = any> {
        readonly emitter: Emitter<T>;
        readonly listener: Listener<T>;
        readonly event: T;
        constructor(emitter: Emitter<T>, listener: Listener<T>, event: T);
    }
}
declare module "support/utils/arrays" {
    export function equals<T>(one: ReadonlyArray<T> | undefined, other: ReadonlyArray<T> | undefined, itemEquals?: (a: T, b: T) => boolean): boolean;
}
declare module "support/utils/charCode" {
    /**
     * An inlined enum containing useful character codes (to be used with String.charCodeAt).
     * Please leave the const keyword such that it gets inlined when compiled to JavaScript!
     */
    export const enum CharCode {
        Null = 0,
        /**
         * The `\b` character.
         */
        Backspace = 8,
        /**
         * The `\t` character.
         */
        Tab = 9,
        /**
         * The `\n` character.
         */
        LineFeed = 10,
        /**
         * The `\r` character.
         */
        CarriageReturn = 13,
        Space = 32,
        /**
         * The `!` character.
         */
        ExclamationMark = 33,
        /**
         * The `"` character.
         */
        DoubleQuote = 34,
        /**
         * The `#` character.
         */
        Hash = 35,
        /**
         * The `$` character.
         */
        DollarSign = 36,
        /**
         * The `%` character.
         */
        PercentSign = 37,
        /**
         * The `&` character.
         */
        Ampersand = 38,
        /**
         * The `'` character.
         */
        SingleQuote = 39,
        /**
         * The `(` character.
         */
        OpenParen = 40,
        /**
         * The `)` character.
         */
        CloseParen = 41,
        /**
         * The `*` character.
         */
        Asterisk = 42,
        /**
         * The `+` character.
         */
        Plus = 43,
        /**
         * The `,` character.
         */
        Comma = 44,
        /**
         * The `-` character.
         */
        Dash = 45,
        /**
         * The `.` character.
         */
        Period = 46,
        /**
         * The `/` character.
         */
        Slash = 47,
        Digit0 = 48,
        Digit1 = 49,
        Digit2 = 50,
        Digit3 = 51,
        Digit4 = 52,
        Digit5 = 53,
        Digit6 = 54,
        Digit7 = 55,
        Digit8 = 56,
        Digit9 = 57,
        /**
         * The `:` character.
         */
        Colon = 58,
        /**
         * The `;` character.
         */
        Semicolon = 59,
        /**
         * The `<` character.
         */
        LessThan = 60,
        /**
         * The `=` character.
         */
        Equals = 61,
        /**
         * The `>` character.
         */
        GreaterThan = 62,
        /**
         * The `?` character.
         */
        QuestionMark = 63,
        /**
         * The `@` character.
         */
        AtSign = 64,
        A = 65,
        B = 66,
        C = 67,
        D = 68,
        E = 69,
        F = 70,
        G = 71,
        H = 72,
        I = 73,
        J = 74,
        K = 75,
        L = 76,
        M = 77,
        N = 78,
        O = 79,
        P = 80,
        Q = 81,
        R = 82,
        S = 83,
        T = 84,
        U = 85,
        V = 86,
        W = 87,
        X = 88,
        Y = 89,
        Z = 90,
        /**
         * The `[` character.
         */
        OpenSquareBracket = 91,
        /**
         * The `\` character.
         */
        Backslash = 92,
        /**
         * The `]` character.
         */
        CloseSquareBracket = 93,
        /**
         * The `^` character.
         */
        Caret = 94,
        /**
         * The `_` character.
         */
        Underline = 95,
        /**
         * The ``(`)`` character.
         */
        BackTick = 96,
        a = 97,
        b = 98,
        c = 99,
        d = 100,
        e = 101,
        f = 102,
        g = 103,
        h = 104,
        i = 105,
        j = 106,
        k = 107,
        l = 108,
        m = 109,
        n = 110,
        o = 111,
        p = 112,
        q = 113,
        r = 114,
        s = 115,
        t = 116,
        u = 117,
        v = 118,
        w = 119,
        x = 120,
        y = 121,
        z = 122,
        /**
         * The `{` character.
         */
        OpenCurlyBrace = 123,
        /**
         * The `|` character.
         */
        Pipe = 124,
        /**
         * The `}` character.
         */
        CloseCurlyBrace = 125,
        /**
         * The `~` character.
         */
        Tilde = 126,
        U_Combining_Grave_Accent = 768,
        U_Combining_Acute_Accent = 769,
        U_Combining_Circumflex_Accent = 770,
        U_Combining_Tilde = 771,
        U_Combining_Macron = 772,
        U_Combining_Overline = 773,
        U_Combining_Breve = 774,
        U_Combining_Dot_Above = 775,
        U_Combining_Diaeresis = 776,
        U_Combining_Hook_Above = 777,
        U_Combining_Ring_Above = 778,
        U_Combining_Double_Acute_Accent = 779,
        U_Combining_Caron = 780,
        U_Combining_Vertical_Line_Above = 781,
        U_Combining_Double_Vertical_Line_Above = 782,
        U_Combining_Double_Grave_Accent = 783,
        U_Combining_Candrabindu = 784,
        U_Combining_Inverted_Breve = 785,
        U_Combining_Turned_Comma_Above = 786,
        U_Combining_Comma_Above = 787,
        U_Combining_Reversed_Comma_Above = 788,
        U_Combining_Comma_Above_Right = 789,
        U_Combining_Grave_Accent_Below = 790,
        U_Combining_Acute_Accent_Below = 791,
        U_Combining_Left_Tack_Below = 792,
        U_Combining_Right_Tack_Below = 793,
        U_Combining_Left_Angle_Above = 794,
        U_Combining_Horn = 795,
        U_Combining_Left_Half_Ring_Below = 796,
        U_Combining_Up_Tack_Below = 797,
        U_Combining_Down_Tack_Below = 798,
        U_Combining_Plus_Sign_Below = 799,
        U_Combining_Minus_Sign_Below = 800,
        U_Combining_Palatalized_Hook_Below = 801,
        U_Combining_Retroflex_Hook_Below = 802,
        U_Combining_Dot_Below = 803,
        U_Combining_Diaeresis_Below = 804,
        U_Combining_Ring_Below = 805,
        U_Combining_Comma_Below = 806,
        U_Combining_Cedilla = 807,
        U_Combining_Ogonek = 808,
        U_Combining_Vertical_Line_Below = 809,
        U_Combining_Bridge_Below = 810,
        U_Combining_Inverted_Double_Arch_Below = 811,
        U_Combining_Caron_Below = 812,
        U_Combining_Circumflex_Accent_Below = 813,
        U_Combining_Breve_Below = 814,
        U_Combining_Inverted_Breve_Below = 815,
        U_Combining_Tilde_Below = 816,
        U_Combining_Macron_Below = 817,
        U_Combining_Low_Line = 818,
        U_Combining_Double_Low_Line = 819,
        U_Combining_Tilde_Overlay = 820,
        U_Combining_Short_Stroke_Overlay = 821,
        U_Combining_Long_Stroke_Overlay = 822,
        U_Combining_Short_Solidus_Overlay = 823,
        U_Combining_Long_Solidus_Overlay = 824,
        U_Combining_Right_Half_Ring_Below = 825,
        U_Combining_Inverted_Bridge_Below = 826,
        U_Combining_Square_Below = 827,
        U_Combining_Seagull_Below = 828,
        U_Combining_X_Above = 829,
        U_Combining_Vertical_Tilde = 830,
        U_Combining_Double_Overline = 831,
        U_Combining_Grave_Tone_Mark = 832,
        U_Combining_Acute_Tone_Mark = 833,
        U_Combining_Greek_Perispomeni = 834,
        U_Combining_Greek_Koronis = 835,
        U_Combining_Greek_Dialytika_Tonos = 836,
        U_Combining_Greek_Ypogegrammeni = 837,
        U_Combining_Bridge_Above = 838,
        U_Combining_Equals_Sign_Below = 839,
        U_Combining_Double_Vertical_Line_Below = 840,
        U_Combining_Left_Angle_Below = 841,
        U_Combining_Not_Tilde_Above = 842,
        U_Combining_Homothetic_Above = 843,
        U_Combining_Almost_Equal_To_Above = 844,
        U_Combining_Left_Right_Arrow_Below = 845,
        U_Combining_Upwards_Arrow_Below = 846,
        U_Combining_Grapheme_Joiner = 847,
        U_Combining_Right_Arrowhead_Above = 848,
        U_Combining_Left_Half_Ring_Above = 849,
        U_Combining_Fermata = 850,
        U_Combining_X_Below = 851,
        U_Combining_Left_Arrowhead_Below = 852,
        U_Combining_Right_Arrowhead_Below = 853,
        U_Combining_Right_Arrowhead_And_Up_Arrowhead_Below = 854,
        U_Combining_Right_Half_Ring_Above = 855,
        U_Combining_Dot_Above_Right = 856,
        U_Combining_Asterisk_Below = 857,
        U_Combining_Double_Ring_Below = 858,
        U_Combining_Zigzag_Above = 859,
        U_Combining_Double_Breve_Below = 860,
        U_Combining_Double_Breve = 861,
        U_Combining_Double_Macron = 862,
        U_Combining_Double_Macron_Below = 863,
        U_Combining_Double_Tilde = 864,
        U_Combining_Double_Inverted_Breve = 865,
        U_Combining_Double_Rightwards_Arrow_Below = 866,
        U_Combining_Latin_Small_Letter_A = 867,
        U_Combining_Latin_Small_Letter_E = 868,
        U_Combining_Latin_Small_Letter_I = 869,
        U_Combining_Latin_Small_Letter_O = 870,
        U_Combining_Latin_Small_Letter_U = 871,
        U_Combining_Latin_Small_Letter_C = 872,
        U_Combining_Latin_Small_Letter_D = 873,
        U_Combining_Latin_Small_Letter_H = 874,
        U_Combining_Latin_Small_Letter_M = 875,
        U_Combining_Latin_Small_Letter_R = 876,
        U_Combining_Latin_Small_Letter_T = 877,
        U_Combining_Latin_Small_Letter_V = 878,
        U_Combining_Latin_Small_Letter_X = 879,
        /**
         * Unicode Character 'LINE SEPARATOR' (U+2028)
         * http://www.fileformat.info/info/unicode/char/2028/index.htm
         */
        LINE_SEPARATOR = 8232,
        /**
         * Unicode Character 'PARAGRAPH SEPARATOR' (U+2029)
         * http://www.fileformat.info/info/unicode/char/2029/index.htm
         */
        PARAGRAPH_SEPARATOR = 8233,
        /**
         * Unicode Character 'NEXT LINE' (U+0085)
         * http://www.fileformat.info/info/unicode/char/0085/index.htm
         */
        NEXT_LINE = 133,
        U_CIRCUMFLEX = 94,
        U_GRAVE_ACCENT = 96,
        U_DIAERESIS = 168,
        U_MACRON = 175,
        U_ACUTE_ACCENT = 180,
        U_CEDILLA = 184,
        U_MODIFIER_LETTER_LEFT_ARROWHEAD = 706,
        U_MODIFIER_LETTER_RIGHT_ARROWHEAD = 707,
        U_MODIFIER_LETTER_UP_ARROWHEAD = 708,
        U_MODIFIER_LETTER_DOWN_ARROWHEAD = 709,
        U_MODIFIER_LETTER_CENTRED_RIGHT_HALF_RING = 722,
        U_MODIFIER_LETTER_CENTRED_LEFT_HALF_RING = 723,
        U_MODIFIER_LETTER_UP_TACK = 724,
        U_MODIFIER_LETTER_DOWN_TACK = 725,
        U_MODIFIER_LETTER_PLUS_SIGN = 726,
        U_MODIFIER_LETTER_MINUS_SIGN = 727,
        U_BREVE = 728,
        U_DOT_ABOVE = 729,
        U_RING_ABOVE = 730,
        U_OGONEK = 731,
        U_SMALL_TILDE = 732,
        U_DOUBLE_ACUTE_ACCENT = 733,
        U_MODIFIER_LETTER_RHOTIC_HOOK = 734,
        U_MODIFIER_LETTER_CROSS_ACCENT = 735,
        U_MODIFIER_LETTER_EXTRA_HIGH_TONE_BAR = 741,
        U_MODIFIER_LETTER_HIGH_TONE_BAR = 742,
        U_MODIFIER_LETTER_MID_TONE_BAR = 743,
        U_MODIFIER_LETTER_LOW_TONE_BAR = 744,
        U_MODIFIER_LETTER_EXTRA_LOW_TONE_BAR = 745,
        U_MODIFIER_LETTER_YIN_DEPARTING_TONE_MARK = 746,
        U_MODIFIER_LETTER_YANG_DEPARTING_TONE_MARK = 747,
        U_MODIFIER_LETTER_UNASPIRATED = 749,
        U_MODIFIER_LETTER_LOW_DOWN_ARROWHEAD = 751,
        U_MODIFIER_LETTER_LOW_UP_ARROWHEAD = 752,
        U_MODIFIER_LETTER_LOW_LEFT_ARROWHEAD = 753,
        U_MODIFIER_LETTER_LOW_RIGHT_ARROWHEAD = 754,
        U_MODIFIER_LETTER_LOW_RING = 755,
        U_MODIFIER_LETTER_MIDDLE_GRAVE_ACCENT = 756,
        U_MODIFIER_LETTER_MIDDLE_DOUBLE_GRAVE_ACCENT = 757,
        U_MODIFIER_LETTER_MIDDLE_DOUBLE_ACUTE_ACCENT = 758,
        U_MODIFIER_LETTER_LOW_TILDE = 759,
        U_MODIFIER_LETTER_RAISED_COLON = 760,
        U_MODIFIER_LETTER_BEGIN_HIGH_TONE = 761,
        U_MODIFIER_LETTER_END_HIGH_TONE = 762,
        U_MODIFIER_LETTER_BEGIN_LOW_TONE = 763,
        U_MODIFIER_LETTER_END_LOW_TONE = 764,
        U_MODIFIER_LETTER_SHELF = 765,
        U_MODIFIER_LETTER_OPEN_SHELF = 766,
        U_MODIFIER_LETTER_LOW_LEFT_ARROW = 767,
        U_GREEK_LOWER_NUMERAL_SIGN = 885,
        U_GREEK_TONOS = 900,
        U_GREEK_DIALYTIKA_TONOS = 901,
        U_GREEK_KORONIS = 8125,
        U_GREEK_PSILI = 8127,
        U_GREEK_PERISPOMENI = 8128,
        U_GREEK_DIALYTIKA_AND_PERISPOMENI = 8129,
        U_GREEK_PSILI_AND_VARIA = 8141,
        U_GREEK_PSILI_AND_OXIA = 8142,
        U_GREEK_PSILI_AND_PERISPOMENI = 8143,
        U_GREEK_DASIA_AND_VARIA = 8157,
        U_GREEK_DASIA_AND_OXIA = 8158,
        U_GREEK_DASIA_AND_PERISPOMENI = 8159,
        U_GREEK_DIALYTIKA_AND_VARIA = 8173,
        U_GREEK_DIALYTIKA_AND_OXIA = 8174,
        U_GREEK_VARIA = 8175,
        U_GREEK_OXIA = 8189,
        U_GREEK_DASIA = 8190,
        U_IDEOGRAPHIC_FULL_STOP = 12290,
        U_LEFT_CORNER_BRACKET = 12300,
        U_RIGHT_CORNER_BRACKET = 12301,
        U_LEFT_BLACK_LENTICULAR_BRACKET = 12304,
        U_RIGHT_BLACK_LENTICULAR_BRACKET = 12305,
        U_OVERLINE = 8254,
        /**
         * UTF-8 BOM
         * Unicode Character 'ZERO WIDTH NO-BREAK SPACE' (U+FEFF)
         * http://www.fileformat.info/info/unicode/char/feff/index.htm
         */
        UTF8_BOM = 65279,
        U_FULLWIDTH_SEMICOLON = 65307,
        U_FULLWIDTH_COMMA = 65292
    }
}
declare module "support/utils/path" {
    interface ParsedPath {
        root: string;
        dir: string;
        base: string;
        ext: string;
        name: string;
    }
    interface IPath {
        normalize(path: string): string;
        isAbsolute(path: string): boolean;
        join(...paths: string[]): string;
        dirname(path: string): string;
        basename(path: string, ext?: string): string;
        extname(path: string): string;
        format(pathObject: ParsedPath): string;
        parse(path: string): ParsedPath;
        sep: '\\' | '/';
        delimiter: string;
        win32: IPath | null;
        posix: IPath | null;
    }
    export const posix: IPath;
}
declare module "support/utils/resources" {
    import * as monaco from 'monaco-editor/esm/vs/editor/editor.api';
    /**
     * BIASED utility that always ignores the casing of uris paths. ONLY use this util if you
     * understand what you are doing.
     *
     * This utility is INCOMPATIBLE with `uri.toString()`-usages and both CANNOT be used interchanged.
     *
     * When dealing with uris from files or documents, `extUri` (the unbiased friend)is sufficient
     * because those uris come from a "trustworthy source". When creating unknown uris it's always
     * better to use `IUriIdentityService` which exposes an `IExtUri`-instance which knows when path
     * casing matters.
     */
    export const dirname: (resource: monaco.Uri) => monaco.Uri;
    export const joinPath: (resource: monaco.Uri, ...pathFragment: string[]) => monaco.Uri;
}
declare module "support/encodedTokenAttributes" {
    /**
     * Open ended enum at runtime
     */
    export const enum LanguageId {
        Null = 0,
        PlainText = 1
    }
    /**
     * A font style. Values are 2^x such that a bit mask can be used.
     */
    export const enum FontStyle {
        NotSet = -1,
        None = 0,
        Italic = 1,
        Bold = 2,
        Underline = 4,
        Strikethrough = 8
    }
    /**
     * Open ended enum at runtime
     */
    export const enum ColorId {
        None = 0,
        DefaultForeground = 1,
        DefaultBackground = 2
    }
    /**
     * A standard token type.
     */
    export const enum StandardTokenType {
        Other = 0,
        Comment = 1,
        String = 2,
        RegEx = 3
    }
    /**
     * Helpers to manage the "collapsed" metadata of an entire StackElement stack.
     * The following assumptions have been made:
     *  - languageId < 256 => needs 8 bits
     *  - unique color count < 512 => needs 9 bits
     *
     * The binary format is:
     * - -------------------------------------------
     *     3322 2222 2222 1111 1111 1100 0000 0000
     *     1098 7654 3210 9876 5432 1098 7654 3210
     * - -------------------------------------------
     *     xxxx xxxx xxxx xxxx xxxx xxxx xxxx xxxx
     *     bbbb bbbb ffff ffff fFFF FBTT LLLL LLLL
     * - -------------------------------------------
     *  - L = LanguageId (8 bits)
     *  - T = StandardTokenType (2 bits)
     *  - B = Balanced bracket (1 bit)
     *  - F = FontStyle (4 bits)
     *  - f = foreground color (9 bits)
     *  - b = background color (9 bits)
     *
     */
    export const enum MetadataConsts {
        LANGUAGEID_MASK = 255,
        TOKEN_TYPE_MASK = 768,
        BALANCED_BRACKETS_MASK = 1024,
        FONT_STYLE_MASK = 30720,
        FOREGROUND_MASK = 16744448,
        BACKGROUND_MASK = 4278190080,
        ITALIC_MASK = 2048,
        BOLD_MASK = 4096,
        UNDERLINE_MASK = 8192,
        STRIKETHROUGH_MASK = 16384,
        SEMANTIC_USE_ITALIC = 1,
        SEMANTIC_USE_BOLD = 2,
        SEMANTIC_USE_UNDERLINE = 4,
        SEMANTIC_USE_STRIKETHROUGH = 8,
        SEMANTIC_USE_FOREGROUND = 16,
        SEMANTIC_USE_BACKGROUND = 32,
        LANGUAGEID_OFFSET = 0,
        TOKEN_TYPE_OFFSET = 8,
        BALANCED_BRACKETS_OFFSET = 10,
        FONT_STYLE_OFFSET = 11,
        FOREGROUND_OFFSET = 15,
        BACKGROUND_OFFSET = 24
    }
    /**
     */
    export class TokenMetadata {
        static getLanguageId(metadata: number): LanguageId;
    }
}
declare module "browser/textMate" {
    import { Event } from "support/utils/event";
    import type { IGrammar } from 'vscode-textmate';
    export interface ITextMateService {
        readonly _serviceBrand: undefined;
        onDidEncounterLanguage: Event<string>;
        createGrammar(languageId: string): Promise<IGrammar | null>;
    }
}
declare module "common/TMScopeRegistry" {
    import * as monaco from 'monaco-editor/esm/vs/editor/editor.api';
    import { Disposable } from "support/utils/lifecycle";
    import { LanguageId, StandardTokenType } from "support/encodedTokenAttributes";
    export interface IValidGrammarDefinition {
        location: monaco.Uri;
        language?: string;
        scopeName: string;
        embeddedLanguages: IValidEmbeddedLanguagesMap;
        tokenTypes: IValidTokenTypeMap;
        injectTo?: string[];
        balancedBracketSelectors: string[];
        unbalancedBracketSelectors: string[];
    }
    export interface IValidTokenTypeMap {
        [selector: string]: StandardTokenType;
    }
    export interface IValidEmbeddedLanguagesMap {
        [scopeName: string]: LanguageId;
    }
    export class TMScopeRegistry extends Disposable {
        private _scopeNameToLanguageRegistration;
        constructor();
        reset(): void;
        register(def: IValidGrammarDefinition): void;
        getGrammarDefinition(scopeName: string): IValidGrammarDefinition | null;
    }
}
declare module "common/TMGrammarFactory" {
    import * as monaco from 'monaco-editor/esm/vs/editor/editor.api';
    import type { IGrammar, StackElement, IRawTheme, IOnigLib } from 'vscode-textmate';
    import { Disposable } from "support/utils/lifecycle";
    import { IValidGrammarDefinition } from "common/TMScopeRegistry";
    interface ITMGrammarFactoryHost {
        logTrace(msg: string): void;
        logError(msg: string, err: any): void;
        readFile(resource: monaco.Uri): Promise<string>;
    }
    interface ICreateGrammarResult {
        languageId: string;
        grammar: IGrammar | null;
        initialState: StackElement;
        containsEmbeddedLanguages: boolean;
    }
    export const missingTMGrammarErrorMessage = "No TM Grammar registered for this language.";
    export class TMGrammarFactory extends Disposable {
        private readonly _host;
        private readonly _initialState;
        private readonly _scopeRegistry;
        private readonly _injections;
        private readonly _injectedEmbeddedLanguages;
        private readonly _languageToScope;
        private readonly _grammarRegistry;
        constructor(host: ITMGrammarFactoryHost, grammarDefinitions: IValidGrammarDefinition[], vscodeTextmate: typeof import('vscode-textmate'), onigLib: Promise<IOnigLib>);
        has(languageId: string): boolean;
        setTheme(theme: IRawTheme, colorMap: string[]): void;
        getColorMap(): string[];
        createGrammar(languageId: string, encodedLanguageId: number): Promise<ICreateGrammarResult>;
    }
}
declare module "common/TMTokenization" {
    import * as monaco from 'monaco-editor/esm/vs/editor/editor.api';
    import { Event } from "support/utils/event";
    import { LanguageId } from "support/encodedTokenAttributes";
    import type { IGrammar, StackElement } from 'vscode-textmate';
    import { Disposable } from "support/utils/lifecycle";
    export class TMTokenization extends Disposable implements monaco.languages.EncodedTokensProvider {
        private readonly _grammar;
        private readonly _containsEmbeddedLanguages;
        private readonly _seenLanguages;
        private readonly _initialState;
        private readonly _onDidEncounterLanguage;
        readonly onDidEncounterLanguage: Event<LanguageId>;
        constructor(grammar: IGrammar, initialState: StackElement, containsEmbeddedLanguages: boolean);
        getInitialState(): monaco.languages.IState;
        tokenize(line: string, state: monaco.languages.IState): monaco.languages.ILineTokens;
        tokenizeEncoded(line: string, state: StackElement): monaco.languages.IEncodedLineTokens;
    }
}
declare module "support/utils/json" {
    export interface ParseError {
        error: ParseErrorCode;
        offset: number;
        length: number;
    }
    const enum ParseErrorCode {
        InvalidSymbol = 1,
        InvalidNumberFormat = 2,
        PropertyNameExpected = 3,
        ValueExpected = 4,
        ColonExpected = 5,
        CommaExpected = 6,
        CloseBraceExpected = 7,
        CloseBracketExpected = 8,
        EndOfFileExpected = 9,
        InvalidCommentToken = 10,
        UnexpectedEndOfComment = 11,
        UnexpectedEndOfString = 12,
        UnexpectedEndOfNumber = 13,
        InvalidUnicode = 14,
        InvalidEscapeCharacter = 15,
        InvalidCharacter = 16
    }
    type NodeType = 'object' | 'array' | 'property' | 'string' | 'number' | 'boolean' | 'null';
    interface ParseOptions {
        disallowComments?: boolean;
        allowTrailingComma?: boolean;
        allowEmptyContent?: boolean;
    }
    namespace ParseOptions {
        const DEFAULT: {
            allowTrailingComma: boolean;
        };
    }
    /**
     * Parses the given text and returns the object the JSON content represents. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.
     * Therefore always check the errors list to find out if the input was valid.
     */
    export function parse(text: string, errors?: ParseError[], options?: ParseOptions): any;
    export function getNodeType(value: any): NodeType;
}
declare module "support/utils/color" {
    class RGBA {
        _rgbaBrand: void;
        /**
         * Red: integer in [0-255]
         */
        readonly r: number;
        /**
         * Green: integer in [0-255]
         */
        readonly g: number;
        /**
         * Blue: integer in [0-255]
         */
        readonly b: number;
        /**
         * Alpha: float in [0-1]
         */
        readonly a: number;
        constructor(r: number, g: number, b: number, a?: number);
        static equals(a: RGBA, b: RGBA): boolean;
    }
    class HSLA {
        _hslaBrand: void;
        /**
         * Hue: integer in [0, 360]
         */
        readonly h: number;
        /**
         * Saturation: float in [0, 1]
         */
        readonly s: number;
        /**
         * Luminosity: float in [0, 1]
         */
        readonly l: number;
        /**
         * Alpha: float in [0, 1]
         */
        readonly a: number;
        constructor(h: number, s: number, l: number, a: number);
        static equals(a: HSLA, b: HSLA): boolean;
        /**
         * Converts an RGB color value to HSL. Conversion formula
         * adapted from http://en.wikipedia.org/wiki/HSL_color_space.
         * Assumes r, g, and b are contained in the set [0, 255] and
         * returns h in the set [0, 360], s, and l in the set [0, 1].
         */
        static fromRGBA(rgba: RGBA): HSLA;
        private static _hue2rgb;
        /**
         * Converts an HSL color value to RGB. Conversion formula
         * adapted from http://en.wikipedia.org/wiki/HSL_color_space.
         * Assumes h in the set [0, 360] s, and l are contained in the set [0, 1] and
         * returns r, g, and b in the set [0, 255].
         */
        static toRGBA(hsla: HSLA): RGBA;
    }
    class HSVA {
        _hsvaBrand: void;
        /**
         * Hue: integer in [0, 360]
         */
        readonly h: number;
        /**
         * Saturation: float in [0, 1]
         */
        readonly s: number;
        /**
         * Value: float in [0, 1]
         */
        readonly v: number;
        /**
         * Alpha: float in [0, 1]
         */
        readonly a: number;
        constructor(h: number, s: number, v: number, a: number);
        static equals(a: HSVA, b: HSVA): boolean;
        static fromRGBA(rgba: RGBA): HSVA;
        static toRGBA(hsva: HSVA): RGBA;
    }
    export class Color {
        static fromHex(hex: string): Color;
        readonly rgba: RGBA;
        private _hsla?;
        get hsla(): HSLA;
        private _hsva?;
        get hsva(): HSVA;
        constructor(arg: RGBA | HSLA | HSVA);
        equals(other: Color | null): boolean;
        /**
         * http://www.w3.org/TR/WCAG20/#relativeluminancedef
         * Returns the number in the set [0, 1]. O => Darkest Black. 1 => Lightest white.
         */
        getRelativeLuminance(): number;
        private static _relativeLuminanceForComponent;
        /**
         * http://www.w3.org/TR/WCAG20/#contrast-ratiodef
         * Returns the contrast ration number in the set [1, 21].
         */
        getContrastRatio(another: Color): number;
        /**
         *	http://24ways.org/2010/calculating-color-contrast
         *  Return 'true' if darker color otherwise 'false'
         */
        isDarker(): boolean;
        /**
         *	http://24ways.org/2010/calculating-color-contrast
         *  Return 'true' if lighter color otherwise 'false'
         */
        isLighter(): boolean;
        isLighterThan(another: Color): boolean;
        isDarkerThan(another: Color): boolean;
        lighten(factor: number): Color;
        darken(factor: number): Color;
        transparent(factor: number): Color;
        isTransparent(): boolean;
        isOpaque(): boolean;
        opposite(): Color;
        blend(c: Color): Color;
        makeOpaque(opaqueBackground: Color): Color;
        flatten(...backgrounds: Color[]): Color;
        private static _flatten;
        private _toString?;
        toString(): string;
        static getLighterColor(of: Color, relative: Color, factor?: number): Color;
        static getDarkerColor(of: Color, relative: Color, factor?: number): Color;
        static readonly white: Color;
        static readonly black: Color;
        static readonly red: Color;
        static readonly blue: Color;
        static readonly green: Color;
        static readonly cyan: Color;
        static readonly lightgrey: Color;
        static readonly transparent: Color;
    }
    export namespace Color {
        namespace Format {
            namespace CSS {
                function formatRGB(color: Color): string;
                function formatRGBA(color: Color): string;
                function formatHSL(color: Color): string;
                function formatHSLA(color: Color): string;
                /**
                 * Formats the color as #RRGGBB
                 */
                function formatHex(color: Color): string;
                /**
                 * Formats the color as #RRGGBBAA
                 * If 'compact' is set, colors without transparancy will be printed as #RRGGBB
                 */
                function formatHexA(color: Color, compact?: boolean): string;
                /**
                 * The default format will use HEX if opaque and RGBA otherwise.
                 */
                function format(color: Color): string;
                /**
                 * Converts an Hex color value to a Color.
                 * returns r, g, and b are contained in the set [0, 255]
                 * @param hex string (#RGB, #RGBA, #RRGGBB or #RRGGBBAA).
                 */
                function parseHex(hex: string): Color | null;
            }
        }
    }
}
declare module "support/colorRegistry" {
    export type ColorIdentifier = string;
    /**
     * Editor background color.
     * Because of bug https://monacotools.visualstudio.com/DefaultCollection/Monaco/_workitems/edit/13254
     * we are *not* using the color white (or #ffffff, rgba(255,255,255)) but something very close to white.
     */
    export const editorBackground = "editor.background";
    /**
     * Editor foreground color.
     */
    export const editorForeground = "editor.foreground";
}
declare module "support/theme" {
    /**
     * Color scheme used by the OS and by color themes.
     */
    export enum ColorScheme {
        DARK = "dark",
        LIGHT = "light",
        HIGH_CONTRAST_DARK = "hcDark",
        HIGH_CONTRAST_LIGHT = "hcLight"
    }
}
declare module "support/themeService" {
    import { Color } from "support/utils/color";
    import { ColorIdentifier } from "support/colorRegistry";
    import { ColorScheme } from "support/theme";
    export interface IColorTheme {
        readonly type: ColorScheme;
        readonly label: string;
        /**
         * Resolves the color of the given color identifier. If the theme does not
         * specify the color, the default color is returned unless <code>useDefault</code> is set to false.
         * @param color the id of the color
         * @param useDefault specifies if the default color should be used. If not set, the default is used.
         */
        getColor(color: ColorIdentifier, useDefault?: boolean): Color | undefined;
        /**
         * List of all colors used with tokens. <code>getTokenStyleMetadata</code> references the colors by index into this list.
         */
        readonly tokenColorMap: string[];
    }
}
declare module "support/workbenchThemeService" {
    import { Color } from "support/utils/color";
    import { IColorTheme } from "support/themeService";
    export const VS_LIGHT_THEME = "vs";
    export const VS_DARK_THEME = "vs-dark";
    export const VS_HC_THEME = "hc-black";
    export const VS_HC_LIGHT_THEME = "hc-light";
    interface IWorkbenchTheme {
        readonly id: string;
        readonly label: string;
        readonly description?: string;
    }
    export interface IWorkbenchColorTheme extends IWorkbenchTheme, IColorTheme {
        readonly tokenColors: ITextMateThemingRule[];
        get baseTheme(): string;
    }
    export interface IColorMap {
        [id: string]: Color;
    }
    export interface ITextMateThemingRule {
        name?: string;
        scope?: string | string[];
        settings: ITokenColorizationSetting;
    }
    interface ITokenColorizationSetting {
        foreground?: string;
        background?: string;
        fontStyle?: string;
    }
    export interface ISemanticTokenColorizationSetting {
        foreground?: string;
        fontStyle?: string;
        bold?: boolean;
        underline?: boolean;
        strikethrough?: boolean;
        italic?: boolean;
    }
}
declare module "support/utils/types" {
    /**
     * @returns whether the provided parameter is a JavaScript String or not.
     */
    export function isString(str: unknown): str is string;
    /**
     * @returns whether the provided parameter is a JavaScript Boolean or not.
     */
    export function isBoolean(obj: unknown): obj is boolean;
    /**
     * @returns whether the provided parameter is undefined.
     */
    export function isUndefined(obj: unknown): obj is undefined;
}
declare module "support/tokenClassificationRegistry" {
    import { Color } from "support/utils/color";
    import { Event } from "support/utils/event";
    type TokenClassificationString = string;
    interface TokenSelector {
        match(type: string, modifiers: string[], language: string): number;
        readonly id: string;
    }
    interface TokenTypeOrModifierContribution {
        readonly num: number;
        readonly id: string;
        readonly superType?: string;
        readonly description: string;
        readonly deprecationMessage?: string;
    }
    interface TokenStyleData {
        foreground: Color | undefined;
        bold: boolean | undefined;
        underline: boolean | undefined;
        strikethrough: boolean | undefined;
        italic: boolean | undefined;
    }
    export class TokenStyle implements Readonly<TokenStyleData> {
        readonly foreground: Color | undefined;
        readonly bold: boolean | undefined;
        readonly underline: boolean | undefined;
        readonly strikethrough: boolean | undefined;
        readonly italic: boolean | undefined;
        constructor(foreground: Color | undefined, bold: boolean | undefined, underline: boolean | undefined, strikethrough: boolean | undefined, italic: boolean | undefined);
    }
    export namespace TokenStyle {
        function toJSONObject(style: TokenStyle): any;
        function fromJSONObject(obj: any): TokenStyle | undefined;
        function equals(s1: any, s2: any): boolean;
        function is(s: any): s is TokenStyle;
        function fromData(data: {
            foreground: Color | undefined;
            bold: boolean | undefined;
            underline: boolean | undefined;
            strikethrough: boolean | undefined;
            italic: boolean | undefined;
        }): TokenStyle;
        function fromSettings(foreground: string | undefined, fontStyle: string | undefined): TokenStyle;
        function fromSettings(foreground: string | undefined, fontStyle: string | undefined, bold: boolean | undefined, underline: boolean | undefined, strikethrough: boolean | undefined, italic: boolean | undefined): TokenStyle;
    }
    type ProbeScope = string[];
    interface TokenStyleDefaults {
        scopesToProbe?: ProbeScope[];
        light?: TokenStyleValue;
        dark?: TokenStyleValue;
        hcDark?: TokenStyleValue;
        hcLight?: TokenStyleValue;
    }
    interface SemanticTokenDefaultRule {
        selector: TokenSelector;
        defaults: TokenStyleDefaults;
    }
    export interface SemanticTokenRule {
        style: TokenStyle;
        selector: TokenSelector;
    }
    export namespace SemanticTokenRule {
        function fromJSONObject(registry: ITokenClassificationRegistry, o: any): SemanticTokenRule | undefined;
        function toJSONObject(rule: SemanticTokenRule): any;
        function equals(r1: SemanticTokenRule | undefined, r2: SemanticTokenRule | undefined): boolean;
        function is(r: any): r is SemanticTokenRule;
    }
    /**
     * A TokenStyle Value is either a token style literal, or a TokenClassificationString
     */
    type TokenStyleValue = TokenStyle | TokenClassificationString;
    interface ITokenClassificationRegistry {
        readonly onDidChangeSchema: Event<void>;
        /**
         * Register a token type to the registry.
         * @param id The TokenType id as used in theme description files
         * @param description the description
         */
        registerTokenType(id: string, description: string, superType?: string, deprecationMessage?: string): void;
        /**
         * Register a token modifier to the registry.
         * @param id The TokenModifier id as used in theme description files
         * @param description the description
         */
        registerTokenModifier(id: string, description: string): void;
        /**
         * Parses a token selector from a selector string.
         * @param selectorString selector string in the form (*|type)(.modifier)*
         * @param language language to which the selector applies or undefined if the selector is for all languafe
         * @returns the parsesd selector
         * @throws an error if the string is not a valid selector
         */
        parseTokenSelector(selectorString: string, language?: string): TokenSelector;
        /**
         * Register a TokenStyle default to the registry.
         * @param selector The rule selector
         * @param defaults The default values
         */
        registerTokenStyleDefault(selector: TokenSelector, defaults: TokenStyleDefaults): void;
        /**
         * Deregister a TokenStyle default to the registry.
         * @param selector The rule selector
         */
        deregisterTokenStyleDefault(selector: TokenSelector): void;
        /**
         * Deregister a TokenType from the registry.
         */
        deregisterTokenType(id: string): void;
        /**
         * Deregister a TokenModifier from the registry.
         */
        deregisterTokenModifier(id: string): void;
        /**
         * Get all TokenType contributions
         */
        getTokenTypes(): TokenTypeOrModifierContribution[];
        /**
         * Get all TokenModifier contributions
         */
        getTokenModifiers(): TokenTypeOrModifierContribution[];
        /**
         * The styling rules to used when a schema does not define any styling rules.
         */
        getTokenStylingDefaultRules(): SemanticTokenDefaultRule[];
    }
    export function getTokenClassificationRegistry(): ITokenClassificationRegistry;
}
declare module "support/colorThemeData" {
    import * as monaco from 'monaco-editor/esm/vs/editor/editor.api';
    import { Color } from "support/utils/color";
    import { ITextMateThemingRule, IWorkbenchColorTheme } from "support/workbenchThemeService";
    import { ColorIdentifier } from "support/colorRegistry";
    import { ColorScheme } from "support/theme";
    export class ColorThemeData implements IWorkbenchColorTheme {
        id: string;
        label: string;
        description?: string;
        isLoaded: boolean;
        location: monaco.Uri;
        watch?: boolean;
        private themeTokenColors;
        private customTokenColors;
        private colorMap;
        private customColorMap;
        private semanticTokenRules;
        private customSemanticTokenRules;
        private textMateThemingRules;
        private tokenColorIndex;
        private constructor();
        get tokenColors(): ITextMateThemingRule[];
        getColor(colorId: ColorIdentifier, useDefault?: boolean): Color | undefined;
        private getTokenColorIndex;
        get tokenColorMap(): string[];
        ensureLoaded(): Promise<void>;
        private load;
        clearCaches(): void;
        get baseTheme(): string;
        get classNames(): string[];
        get type(): ColorScheme;
        static createUnloadedTheme(id: string, location: monaco.Uri): ColorThemeData;
    }
}
declare module "support/extensions" {
    interface ICommand {
        command: string;
        title: string;
        category?: string;
    }
    interface IGrammar {
        language: string;
    }
    interface IKeyBinding {
        command: string;
        key: string;
        when?: string;
        mac?: string;
        linux?: string;
        win?: string;
    }
    interface ILanguage {
        id: string;
        extensions: string[];
        aliases: string[];
    }
    interface ISnippet {
        language: string;
    }
    interface ITheme {
        label: string;
    }
    interface IColor {
        id: string;
        description: string;
        defaults: {
            light: string;
            dark: string;
            highContrast: string;
        };
    }
    interface ICodeActionContributionAction {
        readonly kind: string;
        readonly title: string;
        readonly description?: string;
    }
    interface ICodeActionContribution {
        readonly languages: readonly string[];
        readonly actions: readonly ICodeActionContributionAction[];
    }
    interface IExtensionContributions {
        commands?: ICommand[];
        grammars?: IGrammar[];
        keybindings?: IKeyBinding[];
        languages?: ILanguage[];
        snippets?: ISnippet[];
        themes?: ITheme[];
        colors?: IColor[];
        readonly codeActions?: readonly ICodeActionContribution[];
    }
    interface IExtensionCapabilities {
        readonly virtualWorkspaces?: ExtensionVirtualWorkspaceSupport;
        readonly untrustedWorkspaces?: ExtensionUntrustedWorkspaceSupport;
    }
    type LimitedWorkspaceSupportType = 'limited';
    type ExtensionUntrustedWorkspaceSupport = {
        supported: true;
    } | {
        supported: false;
        description: string;
    } | {
        supported: LimitedWorkspaceSupportType;
        description: string;
        restrictedConfigurations?: string[];
    };
    type ExtensionVirtualWorkspaceSupport = boolean | {
        supported: true;
    } | {
        supported: false | LimitedWorkspaceSupportType;
        description: string;
    };
    interface IRelaxedExtensionManifest {
        name: string;
        displayName?: string;
        publisher: string;
        version: string;
        engines: {
            readonly vscode: string;
        };
        description?: string;
        main?: string;
        browser?: string;
        icon?: string;
        categories?: string[];
        keywords?: string[];
        activationEvents?: string[];
        extensionDependencies?: string[];
        extensionPack?: string[];
        contributes?: IExtensionContributions;
        repository?: {
            url: string;
        };
        bugs?: {
            url: string;
        };
        enabledApiProposals?: readonly string[];
        api?: string;
        scripts?: {
            [key: string]: string;
        };
        capabilities?: IExtensionCapabilities;
    }
    export type IExtensionManifest = Readonly<IRelaxedExtensionManifest>;
}
declare module "common/TMGrammars" {
    import * as monaco from 'monaco-editor/esm/vs/editor/editor.api';
    interface IEmbeddedLanguagesMap {
        [scopeName: string]: string;
    }
    interface TokenTypesContribution {
        [scopeName: string]: string;
    }
    export interface ITMSyntaxExtensionPoint {
        language?: string;
        scopeName: string;
        path: string;
        embeddedLanguages?: IEmbeddedLanguagesMap;
        tokenTypes?: TokenTypesContribution;
        injectTo?: string[];
        balancedBracketScopes?: string[];
        unbalancedBracketScopes?: string[];
    }
    export interface IExtensionValue<T> {
        extensionLocation: monaco.Uri;
        value: T;
    }
}
declare module "browser/abstractTextMateService" {
    import * as monaco from 'monaco-editor/esm/vs/editor/editor.api';
    import { Event } from "support/utils/event";
    import { LanguageId } from "support/encodedTokenAttributes";
    import { ITextMateService } from "browser/textMate";
    import type { IGrammar, StackElement, IRawTheme } from 'vscode-textmate';
    import { Disposable } from "support/utils/lifecycle";
    import { IValidGrammarDefinition } from "common/TMScopeRegistry";
    import { TMGrammarFactory } from "common/TMGrammarFactory";
    export abstract class AbstractTextMateService extends Disposable implements ITextMateService {
        _serviceBrand: undefined;
        private readonly _onDidEncounterLanguage;
        readonly onDidEncounterLanguage: Event<string>;
        private readonly _encounteredLanguages;
        private _grammarDefinitions;
        private _grammarFactory;
        private _tokenizersRegistrations;
        protected _currentTheme: IRawTheme | null;
        protected _currentTokenColorMap: string[] | null;
        protected _onigurumWASMpath: string | null;
        private _languages;
        private _languageNames;
        private _colorTheme;
        constructor();
        setOnigurumWASM(onigurumWASMpath: string): void;
        setLanguages(extensions: string[]): Promise<void>;
        setTheme(baseTheme: string, theme: string): Promise<void>;
        private _canCreateGrammarFactory;
        private _getOrCreateGrammarFactory;
        private _createFactory;
        private _updateTheme;
        protected _doUpdateTheme(grammarFactory: TMGrammarFactory | null, theme: IRawTheme, tokenColorMap: string[]): void;
        private static equalsTokenRules;
        createGrammar(languageId: string): Promise<IGrammar | null>;
        protected _onDidCreateGrammarFactory(grammarDefinitions: IValidGrammarDefinition[]): void;
        protected _onDidDisposeGrammarFactory(): void;
        private _vscodeOniguruma;
        private _getVSCodeOniguruma;
        private _doGetVSCodeOniguruma;
        protected abstract _loadVSCodeOnigurumWASM(): Promise<Response | ArrayBuffer>;
    }
    export function nullTokenizeEncoded(languageId: LanguageId, state: StackElement): monaco.languages.IEncodedLineTokens;
}
declare module "browser/browserTextMateService" {
    import { AbstractTextMateService } from "browser/abstractTextMateService";
    export class TextMateService extends AbstractTextMateService {
        protected _loadVSCodeOnigurumWASM(): Promise<Response | ArrayBuffer>;
    }
}
declare module "index" {
    export { TextMateService } from "browser/browserTextMateService";
    export { ColorThemeData } from "support/colorThemeData";
    export { IExtensionManifest } from "support/extensions";
}
